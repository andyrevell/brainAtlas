par(new=F)
plot(d1)
volumes_new = data.frame(x=seq(3,5,.001))
predicted_data = predict(model, newdata =  volumes_new )
as.vector(unlist(predicted_data))
threshold <- 0.1
d1 <- as.vector(diff(predicted_data))
d1 = predicted_data[-1] - predicted_data[-length(predicted_data)]
par(new=F)
plot(d1)
volumes_new = data.frame(x=seq(1,6,.0001))
predicted_data = predict(model, newdata =  volumes_new )
as.vector(unlist(predicted_data))
threshold <- 0.1
d1 <- as.vector(diff(predicted_data))
par(new=F)
plot(d1)
threshold = -0.00001
d1 <- as.vector(diff(predicted_data))
which(d1 < threshold)
(d1 / d1[1])
volumes_new = data.frame(x=seq(1,6,.01))
predicted_data = predict(model, newdata =  volumes_new )
as.vector(unlist(predicted_data))
threshold = -0.00001
d1 <- as.vector(diff(predicted_data))
which((d1 / d1[1]) < threshold)
d1 / d1[1])
d1 / d1[1]
d1
d1[1]
which((d1 / d1[1]) < threshold)
predicted_data[as.vector(unlist(predicted_data)),1]
predicted_data
volumes_new
which((d1 / d1[1]) < threshold)[1]
which((d1 / d1[1]) < threshold)[1]
volumes_new[which((d1 / d1[1]) < threshold)[1]]
volumes_new
volumes_new[which((d1 / d1[1]) < threshold)[1],1]
ggplot(data.frame(x,y) , aes(x, y) ) + geom_point() + stat_smooth(method = gam, formula = y ~ s(x))
x = rep(vols, samples)
y = as.vector((unlist(bootstrap$broadband)))
df = data.frame(x = x, y = y)
model = gam(y ~ s(x) , data = df)
volumes_new = data.frame(x=seq(1,6,.01))
predicted_data = predict(model, newdata =  volumes_new )
predicted_data[as.vector(unlist(predicted_data))]
x = rep(vols, samples)
y = as.vector((unlist(bootstrap$broadband)))
df = data.frame(x = x, y = y)
model = gam(y ~ s(x) , data = df)
volumes_new = data.frame(x=seq(1,6,.01))
predicted_data = predict(model, newdata =  volumes_new )
predicted_data[as.vector(unlist(predicted_data))]
threshold = -0.1
d1 <- as.vector(diff(predicted_data))
plateau = volumes_new[which((d1 / d1[1]) < threshold)[1],1]
plateau
volumes_new = data.frame(x=seq(1,6,.001))
predicted_data = predict(model, newdata =  volumes_new )
threshold = -0.1
d1 <- as.vector(diff(predicted_data))
plateau = volumes_new[which((d1 / d1[1]) < threshold)[1],1]
print(paste0(i, " ", plateau))
x = rep(vols, samples)
y = as.vector((unlist(bootstrap$broadband)))
df = data.frame(x = x, y = y)
model = gam(y ~ s(x) , data = df)
volumes_new = data.frame(x=seq(1,6,.001))
predicted_data = predict(model, newdata =  volumes_new )
threshold = -0.1
d1 <- as.vector(diff(predicted_data))
plateau = volumes_new[which((d1 / d1[1]) < threshold)[1],1]
bootstrap_results_mean = c(bootstrap_results_mean, plateau)
print(paste0(i, " ", plateau))
#simulate boostrap
bootstrap_results_mean = c()
N = 1000
for (i in 1:N){
bootstrap = means_random_atlases
samples = ncol(bootstrap$broadband)
for (b in 1:length(bootstrap)){
bootstrap[[b]] = means_random_atlases[[b]][,sample(1:samples, samples, replace = T)]
}
#Random Atlases MEANS
vols = c()
for (a in 1:length(random_atlases_to_plot)){
atlas_index_means = which(row.names(bootstrap[[f]]  ) == random_atlases_to_plot[a])
volume = data_random_volumes[which(row.names(bootstrap[[f]])[atlas_index_means] == data_random_volumes$V1),2]
vols = c(vols, volume)
}
x = rep(vols, samples)
y = as.vector((unlist(bootstrap$broadband)))
df = data.frame(x = x, y = y)
model = gam(y ~ s(x) , data = df)
volumes_new = data.frame(x=seq(1,6,.001))
predicted_data = predict(model, newdata =  volumes_new )
threshold = -0.1
d1 <- as.vector(diff(predicted_data))
plateau = volumes_new[which((d1 / d1[1]) < threshold)[1],1]
#par(new=F)
#plot(d1)
#ggplot(data.frame(x,y) , aes(x, y) ) + geom_point() + stat_smooth(method = gam, formula = y ~ s(x))
bootstrap_results_mean = c(bootstrap_results_mean, plateau)
print(paste0(i, " ", plateau))
}
bootstrap_vol_mean = mean(bootstrap_results_mean)
bootstrap_vol_sd = sd(bootstrap_results_mean)
bootstrap_vol_mean
bootstrap_results_mean
na.omit(bootstrap_results_mean)
mean(na.omit(bootstrap_results_mean))
bootstrap_vol_mean = mean(na.omit(bootstrap_results_mean))
bootstrap_vol_sd = sd(na.omit(bootstrap_results_mean))
bootstrap_vol_sd
st_error = bootstrap_vol_sd*qt(.975,df=N-1)/sqrt(N)
bootstrap_vol_CI95_upper =  bootstrap_vol_mean + st_error
bootstrap_vol_CI95_lower =  bootstrap_vol_mean - st_error
total_vol = 10^3.226126 * 1000
parcellations_mean = total_vol / (10^bootstrap_vol_mean)
parcellations_CI95_upper = total_vol / (10^bootstrap_vol_CI95_upper)
parcellations_CI95_lower = total_vol / (10^bootstrap_vol_CI95_lower)
cat(paste0("mean parcellations: ", round(parcellations_mean), "\n95% CI: ",round(parcellations_CI95_upper), " to ", round(parcellations_CI95_lower) ))
d1[-1]
d1[length(d1)]
(d1 / d1[length(d1)])
volumes_new = data.frame(x=seq(1,6,.1))
predicted_data = predict(model, newdata =  volumes_new )
threshold = -0.1
d1 <- as.vector(diff(predicted_data))
plateau = volumes_new[which((d1 / d1[length(d1)]) < threshold)[1],1]
plateau
d1 / d1[length(d1)
]
plateau = volumes_new[which((d1 / d1[length(d1)]) > threshold)[1],1]
plateau
threshold = 0.1
plateau = volumes_new[which((d1 / d1[length(d1)]) > threshold)[1],1]
plateau
#simulate boostrap
bootstrap_results_mean = c()
N = 1000
for (i in 1:N){
bootstrap = means_random_atlases
samples = ncol(bootstrap$broadband)
for (b in 1:length(bootstrap)){
bootstrap[[b]] = means_random_atlases[[b]][,sample(1:samples, samples, replace = T)]
}
#Random Atlases MEANS
vols = c()
for (a in 1:length(random_atlases_to_plot)){
atlas_index_means = which(row.names(bootstrap[[f]]  ) == random_atlases_to_plot[a])
volume = data_random_volumes[which(row.names(bootstrap[[f]])[atlas_index_means] == data_random_volumes$V1),2]
vols = c(vols, volume)
}
x = rep(vols, samples)
y = as.vector((unlist(bootstrap$broadband)))
df = data.frame(x = x, y = y)
model = gam(y ~ s(x) , data = df)
volumes_new = data.frame(x=seq(1,6,.1))
predicted_data = predict(model, newdata =  volumes_new )
threshold = 0.1
d1 <- as.vector(diff(predicted_data))
plateau = volumes_new[which((d1 / d1[length(d1)]) > threshold)[1],1]
#par(new=F)
#plot(d1)
#ggplot(data.frame(x,y) , aes(x, y) ) + geom_point() + stat_smooth(method = gam, formula = y ~ s(x))
bootstrap_results_mean = c(bootstrap_results_mean, plateau)
print(paste0(i, " ", plateau))
}
#simulate boostrap
bootstrap_results_mean = c()
N = 1000
for (i in 1:N){
bootstrap = means_random_atlases
samples = ncol(bootstrap$broadband)
for (b in 1:length(bootstrap)){
bootstrap[[b]] = means_random_atlases[[b]][,sample(1:samples, samples, replace = T)]
}
#Random Atlases MEANS
vols = c()
for (a in 1:length(random_atlases_to_plot)){
atlas_index_means = which(row.names(bootstrap[[f]]  ) == random_atlases_to_plot[a])
volume = data_random_volumes[which(row.names(bootstrap[[f]])[atlas_index_means] == data_random_volumes$V1),2]
vols = c(vols, volume)
}
x = rep(vols, samples)
y = as.vector((unlist(bootstrap$broadband)))
df = data.frame(x = x, y = y)
model = gam(y ~ s(x) , data = df)
volumes_new = data.frame(x=seq(1,6,0.001))
predicted_data = predict(model, newdata =  volumes_new )
threshold = 0.1
d1 <- as.vector(diff(predicted_data))
plateau = volumes_new[which((d1 / d1[length(d1)]) > threshold)[1],1]
#par(new=F)
#plot(d1)
#ggplot(data.frame(x,y) , aes(x, y) ) + geom_point() + stat_smooth(method = gam, formula = y ~ s(x))
bootstrap_results_mean = c(bootstrap_results_mean, plateau)
print(paste0(i, " ", plateau))
}
bootstrap_vol_mean = mean(na.omit(bootstrap_results_mean))
bootstrap_vol_sd = sd(na.omit(bootstrap_results_mean))
st_error = bootstrap_vol_sd*qt(.975,df=N-1)/sqrt(N)
bootstrap_vol_CI95_upper =  bootstrap_vol_mean + st_error
bootstrap_vol_CI95_lower =  bootstrap_vol_mean - st_error
total_vol = 10^3.226126 * 1000
parcellations_mean = total_vol / (10^bootstrap_vol_mean)
parcellations_CI95_upper = total_vol / (10^bootstrap_vol_CI95_upper)
parcellations_CI95_lower = total_vol / (10^bootstrap_vol_CI95_lower)
cat(paste0("mean parcellations: ", round(parcellations_mean), "\n95% CI: ",round(parcellations_CI95_upper), " to ", round(parcellations_CI95_lower) ))
#simulate boostrap
bootstrap_results_mean = c()
N = 1000
for (i in 1:N){
bootstrap = means_random_atlases
samples = ncol(bootstrap$broadband)
for (b in 1:length(bootstrap)){
bootstrap[[b]] = means_random_atlases[[b]][,sample(1:samples, samples, replace = T)]
}
#Random Atlases MEANS
vols = c()
for (a in 1:length(random_atlases_to_plot)){
atlas_index_means = which(row.names(bootstrap[[f]]  ) == random_atlases_to_plot[a])
volume = data_random_volumes[which(row.names(bootstrap[[f]])[atlas_index_means] == data_random_volumes$V1),2]
vols = c(vols, volume)
}
x = rep(vols, samples)
y = as.vector((unlist(bootstrap$broadband)))
df = data.frame(x = x, y = y)
model = gam(y ~ s(x) , data = df)
volumes_new = data.frame(x=seq(1,6,0.0001))
predicted_data = predict(model, newdata =  volumes_new )
threshold = 0.01
d1 <- as.vector(diff(predicted_data))
plateau = volumes_new[which((d1 / d1[length(d1)]) > threshold)[1],1]
#par(new=F)
#plot(d1)
#ggplot(data.frame(x,y) , aes(x, y) ) + geom_point() + stat_smooth(method = gam, formula = y ~ s(x))
bootstrap_results_mean = c(bootstrap_results_mean, plateau)
print(paste0(i, " ", plateau))
}
bootstrap_vol_mean = mean(na.omit(bootstrap_results_mean))
bootstrap_vol_sd = sd(na.omit(bootstrap_results_mean))
st_error = bootstrap_vol_sd*qt(.975,df=N-1)/sqrt(N)
bootstrap_vol_CI95_upper =  bootstrap_vol_mean + st_error
bootstrap_vol_CI95_lower =  bootstrap_vol_mean - st_error
total_vol = 10^3.226126 * 1000
parcellations_mean = total_vol / (10^bootstrap_vol_mean)
parcellations_CI95_upper = total_vol / (10^bootstrap_vol_CI95_upper)
parcellations_CI95_lower = total_vol / (10^bootstrap_vol_CI95_lower)
cat(paste0("mean parcellations: ", round(parcellations_mean), "\n95% CI: ",round(parcellations_CI95_upper), " to ", round(parcellations_CI95_lower) ))
#simulate boostrap
bootstrap_results_mean = c()
N = 1000
for (i in 1:N){
bootstrap = means_random_atlases
samples = ncol(bootstrap$broadband)
for (b in 1:length(bootstrap)){
bootstrap[[b]] = means_random_atlases[[b]][,sample(1:samples, samples, replace = T)]
}
#Random Atlases MEANS
vols = c()
for (a in 1:length(random_atlases_to_plot)){
atlas_index_means = which(row.names(bootstrap[[f]]  ) == random_atlases_to_plot[a])
volume = data_random_volumes[which(row.names(bootstrap[[f]])[atlas_index_means] == data_random_volumes$V1),2]
vols = c(vols, volume)
}
x = rep(vols, samples)
y = as.vector((unlist(bootstrap$broadband)))
df = data.frame(x = x, y = y)
model = gam(y ~ s(x) , data = df)
volumes_new = data.frame(x=seq(1,6,0.001))
predicted_data = predict(model, newdata =  volumes_new )
threshold = 0.001
d1 <- as.vector(diff(predicted_data))
plateau = volumes_new[which((d1 / d1[length(d1)]) > threshold)[1],1]
#par(new=F)
#plot(d1)
#ggplot(data.frame(x,y) , aes(x, y) ) + geom_point() + stat_smooth(method = gam, formula = y ~ s(x))
bootstrap_results_mean = c(bootstrap_results_mean, plateau)
print(paste0(i, " ", plateau))
}
bootstrap_vol_mean = mean(na.omit(bootstrap_results_mean))
bootstrap_vol_sd = sd(na.omit(bootstrap_results_mean))
st_error = bootstrap_vol_sd*qt(.975,df=N-1)/sqrt(N)
bootstrap_vol_CI95_upper =  bootstrap_vol_mean + st_error
bootstrap_vol_CI95_lower =  bootstrap_vol_mean - st_error
total_vol = 10^3.226126 * 1000
parcellations_mean = total_vol / (10^bootstrap_vol_mean)
parcellations_CI95_upper = total_vol / (10^bootstrap_vol_CI95_upper)
parcellations_CI95_lower = total_vol / (10^bootstrap_vol_CI95_lower)
cat(paste0("mean parcellations: ", round(parcellations_mean), "\n95% CI: ",round(parcellations_CI95_upper), " to ", round(parcellations_CI95_lower) ))
#simulate boostrap
bootstrap_results_mean = c()
N = 1000
for (i in 1:N){
bootstrap = means_random_atlases
samples = ncol(bootstrap$broadband)
for (b in 1:length(bootstrap)){
bootstrap[[b]] = means_random_atlases[[b]][,sample(1:samples, samples, replace = T)]
}
#Random Atlases MEANS
vols = c()
for (a in 1:length(random_atlases_to_plot)){
atlas_index_means = which(row.names(bootstrap[[f]]  ) == random_atlases_to_plot[a])
volume = data_random_volumes[which(row.names(bootstrap[[f]])[atlas_index_means] == data_random_volumes$V1),2]
vols = c(vols, volume)
}
x = rep(vols, samples)
y = as.vector((unlist(bootstrap$broadband)))
df = data.frame(x = x, y = y)
model = gam(y ~ s(x) , data = df)
volumes_new = data.frame(x=seq(1,6,0.001))
predicted_data = predict(model, newdata =  volumes_new )
threshold = 0.0001
d1 <- as.vector(diff(predicted_data))
plateau = volumes_new[which((d1 / d1[length(d1)]) > threshold)[1],1]
#par(new=F)
#plot(d1)
#ggplot(data.frame(x,y) , aes(x, y) ) + geom_point() + stat_smooth(method = gam, formula = y ~ s(x))
bootstrap_results_mean = c(bootstrap_results_mean, plateau)
print(paste0(i, " ", plateau))
}
bootstrap_vol_mean = mean(na.omit(bootstrap_results_mean))
bootstrap_vol_sd = sd(na.omit(bootstrap_results_mean))
st_error = bootstrap_vol_sd*qt(.975,df=N-1)/sqrt(N)
bootstrap_vol_CI95_upper =  bootstrap_vol_mean + st_error
bootstrap_vol_CI95_lower =  bootstrap_vol_mean - st_error
total_vol = 10^3.226126 * 1000
parcellations_mean = total_vol / (10^bootstrap_vol_mean)
parcellations_CI95_upper = total_vol / (10^bootstrap_vol_CI95_upper)
parcellations_CI95_lower = total_vol / (10^bootstrap_vol_CI95_lower)
cat(paste0("mean parcellations: ", round(parcellations_mean), "\n95% CI: ",round(parcellations_CI95_upper), " to ", round(parcellations_CI95_lower) ))
bootstrap_results_mean_max = c()
N = 1000
for (i in 1:N){
bootstrap = means_random_atlases
samples = ncol(bootstrap$broadband)
for (b in 1:length(bootstrap)){
bootstrap[[b]] = means_random_atlases[[b]][,sample(1:samples, samples, replace = T)]
}
#Random Atlases MEANS
vols = c()
for (a in 1:length(random_atlases_to_plot)){
atlas_index_means = which(row.names(bootstrap[[f]]  ) == random_atlases_to_plot[a])
volume = data_random_volumes[which(row.names(bootstrap[[f]])[atlas_index_means] == data_random_volumes$V1),2]
vols = c(vols, volume)
}
x = rep(vols, samples)
y = as.vector((unlist(bootstrap$broadband)))
df = data.frame(x = x, y = y)
model = gam(y ~ s(x) , data = df)
volumes_new = data.frame(x=seq(1,6,0.001))
predicted_data = predict(model, newdata =  volumes_new )
threshold = 0.0001
d1 <- as.vector(diff(predicted_data))
plateau = volumes_new[which((d1 / d1[length(d1)]) > threshold)[1],1]
max = volumes_new[which(predicted_data == max(predicted_data)),1]
#par(new=F)
#plot(d1)
#ggplot(data.frame(x,y) , aes(x, y) ) + geom_point() + stat_smooth(method = gam, formula = y ~ s(x))
bootstrap_results_mean = c(bootstrap_results_mean, plateau)
bootstrap_results_mean_max = c(bootstrap_results_mean_max, max)
print(paste0(i, " ", plateau))
}
#simulate boostrap
bootstrap_results_mean = c()
bootstrap_results_mean_max = c()
N = 1000
for (i in 1:N){
bootstrap = means_random_atlases
samples = ncol(bootstrap$broadband)
for (b in 1:length(bootstrap)){
bootstrap[[b]] = means_random_atlases[[b]][,sample(1:samples, samples, replace = T)]
}
#Random Atlases MEANS
vols = c()
for (a in 1:length(random_atlases_to_plot)){
atlas_index_means = which(row.names(bootstrap[[f]]  ) == random_atlases_to_plot[a])
volume = data_random_volumes[which(row.names(bootstrap[[f]])[atlas_index_means] == data_random_volumes$V1),2]
vols = c(vols, volume)
}
x = rep(vols, samples)
y = as.vector((unlist(bootstrap$broadband)))
df = data.frame(x = x, y = y)
model = gam(y ~ s(x) , data = df)
volumes_new = data.frame(x=seq(1,6,0.001))
predicted_data = predict(model, newdata =  volumes_new )
threshold = 0.0001
d1 <- as.vector(diff(predicted_data))
plateau = volumes_new[which((d1 / d1[length(d1)]) > threshold)[1],1]
max = volumes_new[which(predicted_data == max(predicted_data)),1]
#par(new=F)
#plot(d1)
#ggplot(data.frame(x,y) , aes(x, y) ) + geom_point() + stat_smooth(method = gam, formula = y ~ s(x))
bootstrap_results_mean = c(bootstrap_results_mean, plateau)
bootstrap_results_mean_max = c(bootstrap_results_mean_max, max)
print(paste0(i, " ", plateau))
}
bootstrap_vol_mean = mean(na.omit(bootstrap_results_mean))
bootstrap_vol_sd = sd(na.omit(bootstrap_results_mean))
st_error = bootstrap_vol_sd*qt(.975,df=N-1)/sqrt(N)
bootstrap_vol_CI95_upper =  bootstrap_vol_mean + st_error
bootstrap_vol_CI95_lower =  bootstrap_vol_mean - st_error
total_vol = 10^3.226126 * 1000
parcellations_mean = total_vol / (10^bootstrap_vol_mean)
parcellations_CI95_upper = total_vol / (10^bootstrap_vol_CI95_upper)
parcellations_CI95_lower = total_vol / (10^bootstrap_vol_CI95_lower)
cat(paste0("mean parcellations: ", round(parcellations_mean), "\n95% CI: ",round(parcellations_CI95_upper), " to ", round(parcellations_CI95_lower) ))
bootstrap_vol_mean = mean(na.omit(bootstrap_results_mean_max))
bootstrap_vol_sd = sd(na.omit(bootstrap_results_mean_max))
st_error = bootstrap_vol_sd*qt(.975,df=N-1)/sqrt(N)
bootstrap_vol_CI95_upper =  bootstrap_vol_mean + st_error
bootstrap_vol_CI95_lower =  bootstrap_vol_mean - st_error
total_vol = 10^3.226126 * 1000
parcellations_mean = total_vol / (10^bootstrap_vol_mean)
parcellations_CI95_upper = total_vol / (10^bootstrap_vol_CI95_upper)
parcellations_CI95_lower = total_vol / (10^bootstrap_vol_CI95_lower)
cat(paste0("mean parcellations: ", round(parcellations_mean), "\n95% CI: ",round(parcellations_CI95_upper), " to ", round(parcellations_CI95_lower) ))
bootstrap_results_mean_max
#simulate boostrap
bootstrap_results_mean = c()
bootstrap_results_mean_max = c()
N = 1000
for (i in 1:N){
bootstrap = means_random_atlases
samples = ncol(bootstrap$broadband)
for (b in 1:length(bootstrap)){
bootstrap[[b]] = means_random_atlases[[b]][,sample(1:samples, samples, replace = T)]
}
#Random Atlases MEANS
vols = c()
for (a in 1:length(random_atlases_to_plot)){
atlas_index_means = which(row.names(bootstrap[[f]]  ) == random_atlases_to_plot[a])
volume = data_random_volumes[which(row.names(bootstrap[[f]])[atlas_index_means] == data_random_volumes$V1),2]
vols = c(vols, volume)
}
x = rep(vols, samples)
y = as.vector((unlist(bootstrap$broadband)))
df = data.frame(x = x, y = y)
model = gam(y ~ s(x) , data = df)
volumes_new = data.frame(x=seq(1,6,0.001))
predicted_data = predict(model, newdata =  volumes_new )
threshold = 0.0001
d1 <- as.vector(diff(predicted_data))
plateau = volumes_new[which((d1 / d1[length(d1)]) > threshold)[1],1]
max = volumes_new[which(predicted_data == max(predicted_data)),1]
#par(new=F)
#plot(d1)
#ggplot(data.frame(x,y) , aes(x, y) ) + geom_point() + stat_smooth(method = gam, formula = y ~ s(x))
bootstrap_results_mean = c(bootstrap_results_mean, plateau)
bootstrap_results_mean_max = c(bootstrap_results_mean_max, max)
print(paste0(i, " ", plateau))
}
bootstrap_vol_mean = mean(na.omit(bootstrap_results_mean_max))
bootstrap_vol_sd = sd(na.omit(bootstrap_results_mean_max))
st_error = bootstrap_vol_sd*qt(.975,df=N-1)/sqrt(N)
bootstrap_vol_CI95_upper =  bootstrap_vol_mean + st_error
bootstrap_vol_CI95_lower =  bootstrap_vol_mean - st_error
total_vol = 10^3.226126 * 1000
parcellations_mean = total_vol / (10^bootstrap_vol_mean)
parcellations_CI95_upper = total_vol / (10^bootstrap_vol_CI95_upper)
parcellations_CI95_lower = total_vol / (10^bootstrap_vol_CI95_lower)
cat(paste0("mean parcellations: ", round(parcellations_mean), "\n95% CI: ",round(parcellations_CI95_upper), " to ", round(parcellations_CI95_lower) ))
bootstrap_vol_mean
#simulate boostrap
bootstrap_results_mean = c()
bootstrap_results_mean_max = c()
N = 1000
for (i in 1:N){
bootstrap = means_random_atlases
samples = ncol(bootstrap$broadband)
for (b in 1:length(bootstrap)){
bootstrap[[b]] = means_random_atlases[[b]][,sample(1:samples, samples, replace = T)]
}
#Random Atlases MEANS
vols = c()
for (a in 1:length(random_atlases_to_plot)){
atlas_index_means = which(row.names(bootstrap[[f]]  ) == random_atlases_to_plot[a])
volume = data_random_volumes[which(row.names(bootstrap[[f]])[atlas_index_means] == data_random_volumes$V1),2]
vols = c(vols, volume)
}
x = rep(vols, samples)
y = as.vector((unlist(bootstrap$broadband)))
df = data.frame(x = x, y = y)
model = gam(y ~ s(x) , data = df)
volumes_new = data.frame(x=seq(1,6,0.001))
predicted_data = predict(model, newdata =  volumes_new )
threshold = 0.01
d1 <- as.vector(diff(predicted_data))
plateau = volumes_new[which((d1 / d1[length(d1)]) > threshold)[1],1]
max = volumes_new[which(predicted_data == max(predicted_data)),1]
#par(new=F)
#plot(d1)
#ggplot(data.frame(x,y) , aes(x, y) ) + geom_point() + stat_smooth(method = gam, formula = y ~ s(x))
bootstrap_results_mean = c(bootstrap_results_mean, plateau)
bootstrap_results_mean_max = c(bootstrap_results_mean_max, max)
print(paste0(i, " ", plateau))
}
bootstrap_vol_mean = mean(na.omit(bootstrap_results_mean_max))
bootstrap_vol_sd = sd(na.omit(bootstrap_results_mean_max))
st_error = bootstrap_vol_sd*qt(.975,df=N-1)/sqrt(N)
bootstrap_vol_CI95_upper =  bootstrap_vol_mean + st_error
bootstrap_vol_CI95_lower =  bootstrap_vol_mean - st_error
total_vol = 10^3.226126 * 1000
parcellations_mean = total_vol / (10^bootstrap_vol_mean)
parcellations_CI95_upper = total_vol / (10^bootstrap_vol_CI95_upper)
parcellations_CI95_lower = total_vol / (10^bootstrap_vol_CI95_lower)
cat(paste0("mean parcellations: ", round(parcellations_mean), "\n95% CI: ",round(parcellations_CI95_upper), " to ", round(parcellations_CI95_lower) ))
bootstrap_vol_mean
