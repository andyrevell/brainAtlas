CI95_data_postictal_upper[i][[1]] =  avg_data_postictal[i][[1]] + std_data_postictal[i][[1]]/sqrt(length(perm))*t_dist
CI95_data_interictal_lower[i][[1]]  = avg_data_interictal[i][[1]] - std_data_interictal[i][[1]]/sqrt(length(perm))*t_dist
CI95_data_preictal_lower[i][[1]] = avg_data_preictal[i][[1]] - std_data_preictal[i][[1]]/sqrt(length(perm))*t_dist
CI95_data_ictal_lower[i][[1]] = avg_data_ictal[i][[1]] - std_data_ictal[i][[1]]/sqrt(length(perm))*t_dist
CI95_data_postictal_lower[i][[1]] =  avg_data_postictal[i][[1]] - std_data_postictal[i][[1]]/sqrt(length(perm))*t_dist
}
all_data_random_atlases[[a]] = vector(mode = "list", length = 4)
names(all_data_random_atlases[[a]] ) = c("interictal", "preictal", "ictal", "postictal")
for (i in 1:4){
all_data_random_atlases[[a]][[i]] = vector(mode = "list", length = 3)
names(all_data_random_atlases[[a]][[i]]) = c("mean", "CI95_upper", "CI95_lower")
}
all_data_random_atlases[[a]]$interictal$mean = avg_data_interictal
all_data_random_atlases[[a]]$interictal$CI95_upper = CI95_data_interictal_upper
all_data_random_atlases[[a]]$interictal$CI95_lower = CI95_data_interictal_lower
all_data_random_atlases[[a]]$preictal$mean = avg_data_preictal
all_data_random_atlases[[a]]$preictal$CI95_upper = CI95_data_preictal_upper
all_data_random_atlases[[a]]$preictal$CI95_lower = CI95_data_preictal_lower
all_data_random_atlases[[a]]$ictal$mean = avg_data_ictal
all_data_random_atlases[[a]]$ictal$CI95_upper = CI95_data_ictal_upper
all_data_random_atlases[[a]]$ictal$CI95_lower = CI95_data_ictal_lower
all_data_random_atlases[[a]]$postictal$mean = avg_data_postictal
all_data_random_atlases[[a]]$postictal$CI95_upper = CI95_data_postictal_upper
all_data_random_atlases[[a]]$postictal$CI95_lower = CI95_data_postictal_lower
}#end atlases a.
#SFC Standard Atlases
atlases=c('aal_res-1x1x1', 'AAL600', 'CPAC200_res-1x1x1', 'desikan_res-1x1x1','DK_res-1x1x1','JHU_res-1x1x1',
'Schaefer2018_100Parcels_17Networks_order_FSLMNI152_1mm', 'Schaefer2018_200Parcels_17Networks_order_FSLMNI152_1mm',
'Schaefer2018_300Parcels_17Networks_order_FSLMNI152_1mm' , 'Schaefer2018_400Parcels_17Networks_order_FSLMNI152_1mm',
'Schaefer2018_1000Parcels_17Networks_order_FSLMNI152_1mm', 'Talairach_res-1x1x1', 'JHU_aal_combined_res-1x1x1')
#initialize matrices to store all data for each atlas in a list
all_data_standard_atlases = vector(mode = "list", length = length(atlases))
names(all_data_standard_atlases) = atlases
for (a in 1:(length(atlases))){
atlas_data_directory = paste0(data_directory, '/',atlases[a] )
atlas_folder = atlases[a]
data_interictal_file_name = paste0('sub-', sub_ID, '_' , iEEG_filename, '_', interictal_time[1], '_', interictal_time[2], '_', atlas_folder,'_correlation.pickle')
data_preictal_file_name = paste0('sub-', sub_ID, '_' , iEEG_filename, '_', preictal_time[1], '_', preictal_time[2], '_', atlas_folder, '_correlation.pickle')
data_ictal_file_name = paste0('sub-', sub_ID, '_' , iEEG_filename, '_', ictal_time[1], '_', ictal_time[2], '_', atlas_folder , '_correlation.pickle')
data_postictal_file_name = paste0('sub-', sub_ID, '_' , iEEG_filename, '_', postictal_time[1], '_', postictal_time[2], '_', atlas_folder ,'_correlation.pickle')
data_interictal_filepath = paste0(atlas_data_directory, '/', data_interictal_file_name)
data_preictal_filepath = paste0(atlas_data_directory, '/', data_preictal_file_name)
data_ictal_file_path = paste0(atlas_data_directory, '/', data_ictal_file_name)
data_postictal_filepath = paste0(atlas_data_directory, '/', data_postictal_file_name)
data_interictal <- pd$read_pickle(data_interictal_filepath)
names(data_interictal) = data_interictal[6][[1]][,1]
data_preictal <- pd$read_pickle(data_preictal_filepath)
names(data_preictal) = data_preictal[6][[1]][,1]
data_ictal <- pd$read_pickle(data_ictal_file_path)
names(data_ictal) = data_ictal[6][[1]][,1]
data_postictal <- pd$read_pickle(data_postictal_filepath)
names(data_postictal) = data_postictal[6][[1]][,1]
data_interictal = data_interictal[1:5]
data_preictal = data_preictal[1:5]
data_ictal = data_ictal[1:5]
data_postictal = data_postictal[1:5]
all_data_standard_atlases[[a]] = vector(mode = "list", length = 4)
names(all_data_standard_atlases[[a]] ) = c("interictal", "preictal", "ictal", "postictal")
all_data_standard_atlases[[a]]$interictal = data_interictal
all_data_standard_atlases[[a]]$preictal = data_preictal
all_data_standard_atlases[[a]]$ictal = data_ictal
all_data_standard_atlases[[a]]$postictal= data_postictal
}#end atlases a.
file_name = paste0('sub-', sub_ID, '_', iEEG_filename,  '_ICTAL_', ictal_time[1], '_SFC_All_Atlases.RData')
save(all_data_random_atlases, all_data_standard_atlases, file = paste0(output_directory, '/',file_name ))
}
library(reticulate)#read python pickle files
pd <- import("pandas")
#Plot SFC
# Alex computer
BIDS_directory = "/Users/asilva/mount/USERS/arevell/papers/paper001/data_processed/structure_function_correlation_AS/regress_out_distance"
#BIDS_directory = "/Users/andyrevell/mount/DATA/Human_Data/BIDS_processed"
output_directory = "/Users/asilva/mount/USERS/arevell/papers/paper001/paper001/figures/S1/structure_function_correlation"
#output_directory= "/Users/andyrevell/mount/USERS/arevell/papers/paper001/data_processed/figure5_data/structure_function_correlation"
#video_directory = "/Users/andyrevell/Desktop/supplemental_videos/functional_matrices_win02/"
setwd(output_directory)
options(scipen=999)#prevent scientifuc notation. iEEG org times are very long, so helps when reading files to read the number string verb
for (z in 1:20){
if (z == 1){sub_ID='RID0194'; iEEG_filename = 'HUP134_phaseII_D02'; interictal_time = c(157702933433,	157882933433); preictal_time = c(179223935812,	179302933433); ictal_time = c(179302933433,	179381931054); postictal_time = c(179381931054,	179561931054)}
if (z == 2){sub_ID='RID0278'; iEEG_filename = 'HUP138_phaseII'; interictal_time = c(226925740000,	227019140000); preictal_time = c(248432340000,	248525740000); ictal_time = c(248525740000,	248619140000); postictal_time = c(248619140000,	248799140000)}
if (z == 3){sub_ID='RID0278'; iEEG_filename = 'HUP138_phaseII'; interictal_time = c(317408330000,	317568440000); preictal_time = c(338848220000,	339008330000); ictal_time = c(339008330000,	339168440000); postictal_time = c(339168440000,	339348440000)}
if (z == 4){sub_ID='RID0278'; iEEG_filename = 'HUP138_phaseII'; interictal_time = c(394423190000,	394512890000); preictal_time = c(415933490000,	416023190000); ictal_time = c(416023190000,	416112890000); postictal_time = c(416112890000,	416292890000)}
if (z == 5){sub_ID='RID0278'; iEEG_filename = 'HUP138_phaseII'; interictal_time = c(407898590000,	407998350000); preictal_time = c(429398830000,	429498590000); ictal_time = c(429498590000,	429598350000); postictal_time = c(429598350000,	429778350000)}
if (z == 6){sub_ID='RID0278'; iEEG_filename = 'HUP138_phaseII'; interictal_time = c(436904560000,	437015820000); preictal_time = c(458393300000,	458504560000); ictal_time = c(458504560000,	458615820000); postictal_time = c(458615820000,	458795820000)}
if (z == 7){sub_ID='RID0309'; iEEG_filename = 'HUP151_phaseII'; interictal_time = c(473176000000,	473250000000); preictal_time = c(494702000000,	494776000000); ictal_time = c(494776000000,	494850000000); postictal_time = c(494850000000,	495030000000)}
if (z == 8){sub_ID='RID0309'; iEEG_filename = 'HUP151_phaseII'; interictal_time = c(508411424682,	508484532533); preictal_time = c(529938316831,	530011424682); ictal_time = c(530011424682,	530084532533); postictal_time = c(530084532533,	530264532533)}
#if (z == 9){sub_ID='RID0320'; iEEG_filename = 'HUP140_phaseII_D02'; interictal_time = c(310379921071,	310559921071); preictal_time = c(331624747156,	331979921071); ictal_time = c(331979921071,	332335094986); postictal_time = c(332335094986,	332635094986)}
if (z == 9){sub_ID='RID0320'; iEEG_filename = 'HUP140_phaseII_D02'; interictal_time = c(310399132626,	310579132626); preictal_time = c(331624747156,	331979921071); ictal_time = c(331979921071,	332335094986); postictal_time = c(332335094986,	332635094986)}#####
if (z == 10){sub_ID='RID0320'; iEEG_filename = 'HUP140_phaseII_D02'; interictal_time = c(318928040025,	319108040025); preictal_time = c(340243011431,	340528040025); ictal_time = c(340528040025,	340813068619); postictal_time = c(340813068619,	341113068619)}
if (z == 11){sub_ID='RID0320'; iEEG_filename = 'HUP140_phaseII_D02'; interictal_time = c(302115130000,	302295130000); preictal_time = c(344266714798, 344573548935); ictal_time = c(344573548935,	344880383072); postictal_time = c(344880383072,	345180383072)}
if (z == 12){sub_ID='RID0440'; iEEG_filename = 'HUP172_phaseII'; interictal_time = c(356850680000,	356903099171); preictal_time = c(402651841658,	402704260829); ictal_time = c(402704260829,	402756680000 ); postictal_time = c(402756680000,	402936680000)}
if (z == 13){sub_ID='RID0440'; iEEG_filename = 'HUP172_phaseII'; interictal_time = c(367346290000, 367406750000); preictal_time = c(408637470000, 408697930000); ictal_time = c(408697930000, 408758390000); postictal_time = c(408758390000, 408938390000)}
if (z == 14){sub_ID='RID0440'; iEEG_filename = 'HUP172_phaseII'; interictal_time = c(565390000000, 565452288685); preictal_time = c(586927711315, 586990000000); ictal_time = c(586990000000, 587052288685); postictal_time = c(587052288685, 587232288685)}
if (z == 15){sub_ID='RID0440'; iEEG_filename = 'HUP172_phaseII'; interictal_time = c(643376000000, 643427219061); preictal_time = c(664924780939, 664976000000); ictal_time = c(664976000000, 665027219061); postictal_time = c(665027219061, 665207219061)}
if (z == 16){sub_ID='RID0440'; iEEG_filename = 'HUP172_phaseII'; interictal_time = c(671279000000, 671337000000); preictal_time = c(692821000000, 692879000000); ictal_time = c(692879000000, 692937000000); postictal_time = c(692937000000, 693117000000)}
if (z == 17){sub_ID='RID0536'; iEEG_filename = 'HUP195_phaseII_D01'; interictal_time = c(63129090000,	63309090000); preictal_time = c(84609521985,	84729094008); ictal_time = c(84729094008,	84848666031 ); postictal_time = c(84848666031,	85028666031)}
if (z == 18){sub_ID='RID0536'; iEEG_filename = 'HUP195_phaseII_D01'; interictal_time = c(152892270000,	153072270000); preictal_time = c(164626956810,	164694572385); ictal_time = c(164694572385,	164762187960 ); postictal_time = c(164762187960,	164942187960)}
if (z == 19){sub_ID='RID0536'; iEEG_filename = 'HUP195_phaseII_D01'; interictal_time = c(237460640000,	237640640000); preictal_time = c(250573896890,	250710930770); ictal_time = c(250710930770,	250847964650 ); postictal_time = c(250847964650,	251027964650)}
if (z == 20){sub_ID='RID0536'; iEEG_filename = 'HUP195_phaseII_D01'; interictal_time = c(269881750000,	270061750000); preictal_time = c(286753301266,	286819539584); ictal_time = c(286819539584,	286885777902 ); postictal_time = c(286885777902,	287065777902)}
data_directory = paste0(BIDS_directory,'/', 'sub-', sub_ID)
#SFC Random Atlases
atlases=c('RA_N0010', 'RA_N0030', 'RA_N0050', 'RA_N0075','RA_N0100','RA_N0200','RA_N0300', 'RA_N0400', 'RA_N0500' , 'RA_N0750', 'RA_N1000', 'RA_N2000')
#initialize matrices to store all data for each atlas in a list
all_data_random_atlases = vector(mode = "list", length = length(atlases))
names(all_data_random_atlases) = atlases
for (a in 1:(length(atlases))){
atlas_data_directory = paste0(data_directory, '/',atlases[a] )
atlas_folder = atlases[a]
perm = c(1:30)
for (p in 1:(length(perm))){
print(paste0(sub_ID, " Atlas ", atlas_folder, " perm ", p) )
data_interictal_file_name = paste0('sub-', sub_ID, '_' , iEEG_filename, '_', interictal_time[1], '_', interictal_time[2], '_', atlas_folder, '_Perm', sprintf('%04d',perm[p]),'_regress_distance_correlation.pickle')
data_preictal_file_name = paste0('sub-', sub_ID, '_' , iEEG_filename, '_', preictal_time[1], '_', preictal_time[2], '_', atlas_folder, '_Perm', sprintf('%04d',perm[p]),'_regress_distance_correlation.pickle')
data_ictal_file_name = paste0('sub-', sub_ID, '_' , iEEG_filename, '_', ictal_time[1], '_', ictal_time[2], '_', atlas_folder ,'_Perm', sprintf('%04d',perm[p]),'_regress_distance_correlation.pickle')
data_postictal_file_name = paste0('sub-', sub_ID, '_' , iEEG_filename, '_', postictal_time[1], '_', postictal_time[2], '_', atlas_folder ,'_Perm', sprintf('%04d',perm[p]),'_regress_distance_correlation.pickle')
data_interictal_filepath = paste0(atlas_data_directory, '/', data_interictal_file_name)
data_preictal_filepath = paste0(atlas_data_directory, '/', data_preictal_file_name)
data_ictal_file_path = paste0(atlas_data_directory, '/', data_ictal_file_name)
data_postictal_filepath = paste0(atlas_data_directory, '/', data_postictal_file_name)
data_interictal <- pd$read_pickle(data_interictal_filepath)
names(data_interictal) = data_interictal[6][[1]][,1]
data_preictal <- pd$read_pickle(data_preictal_filepath)
names(data_preictal) = data_preictal[6][[1]][,1]
data_ictal <- pd$read_pickle(data_ictal_file_path)
names(data_ictal) = data_ictal[6][[1]][,1]
data_postictal <- pd$read_pickle(data_postictal_filepath)
names(data_postictal) = data_postictal[6][[1]][,1]
data_interictal = data_interictal[1:5]
data_preictal = data_preictal[1:5]
data_ictal = data_ictal[1:5]
data_postictal = data_postictal[1:5]
#initialize average data matrices
if (p == 1){
all_data_interictal = vector(mode = "list", length = 5)
names(all_data_interictal) = names(data_interictal)
all_data_preictal = vector(mode = "list", length = 5)
names(all_data_preictal) = names(data_preictal)
all_data_ictal = vector(mode = "list", length = 5)
names(all_data_ictal) = names(data_ictal)
all_data_postictal = vector(mode = "list", length = 5)
names(all_data_postictal) = names(data_postictal)
avg_data_interictal = vector(mode = "list", length = 5)
names(avg_data_interictal) = names(data_interictal)
avg_data_preictal = vector(mode = "list", length = 5)
names(avg_data_preictal) = names(data_preictal)
avg_data_ictal = vector(mode = "list", length = 5)
names(avg_data_ictal) = names(data_ictal)
avg_data_postictal = vector(mode = "list", length = 5)
names(avg_data_postictal) = names(data_postictal)
std_data_interictal = vector(mode = "list", length = 5)
names(std_data_interictal) = names(data_interictal)
std_data_preictal = vector(mode = "list", length = 5)
names(std_data_preictal) = names(data_preictal)
std_data_ictal = vector(mode = "list", length = 5)
names(std_data_ictal) = names(data_ictal)
std_data_postictal = vector(mode = "list", length = 5)
names(std_data_postictal) = names(data_postictal)
for (i in 1:5){
all_data_interictal[i][[1]] = matrix(nrow = length(perm), ncol =length( data_interictal[1][[1]]) ,rep(0, length( data_interictal[1][[1]])  ))
all_data_preictal[i][[1]] = matrix(nrow = length(perm), ncol =length( data_preictal[1][[1]]) ,rep(0, length( data_preictal[1][[1]])  ))
all_data_ictal[i][[1]] = matrix(nrow = length(perm), ncol =length( data_ictal[1][[1]]) ,rep(0, length( data_ictal[1][[1]])  ))
all_data_postictal[i][[1]] = matrix(nrow = length(perm), ncol =length( data_postictal[1][[1]]) ,rep(0, length( data_postictal[1][[1]])  ))
}
}
#populate average data matrices for each perm
for (i in 1:5){
all_data_interictal[i][[1]][p,]  = data_interictal[i][[1]]
all_data_preictal[i][[1]][p,] = data_preictal[i][[1]]
all_data_ictal[i][[1]][p,] = data_ictal[i][[1]]
all_data_postictal[i][[1]][p,] = data_postictal[i][[1]]
}
}#end p
#calculate means and standard deviations
for (i in 1:5){
avg_data_interictal[i][[1]]  = apply(all_data_interictal[i][[1]], 2, mean)
avg_data_preictal[i][[1]] =  apply(all_data_preictal[i][[1]], 2, mean)
avg_data_ictal[i][[1]] =  apply(all_data_ictal[i][[1]], 2, mean)
avg_data_postictal[i][[1]] =  apply(all_data_postictal[i][[1]], 2, mean)
std_data_interictal[i][[1]]  =  apply(all_data_interictal[i][[1]], 2, sd)
std_data_preictal[i][[1]] =  apply(all_data_preictal[i][[1]], 2, sd)
std_data_ictal[i][[1]] =  apply(all_data_ictal[i][[1]], 2, sd)
std_data_postictal[i][[1]] =   apply(all_data_postictal[i][[1]], 2, sd)
}
#initialize 95% confidence interval matrices
CI95_data_interictal_upper  = avg_data_interictal
CI95_data_preictal_upper = avg_data_preictal
CI95_data_ictal_upper = avg_data_ictal
CI95_data_postictal_upper =  avg_data_postictal
CI95_data_interictal_lower  = avg_data_interictal
CI95_data_preictal_lower = avg_data_preictal
CI95_data_ictal_lower= avg_data_ictal
CI95_data_postictal_lower =  avg_data_postictal
#Populate 95% Confidence Interval using t-distribution
t_dist= 2.042
for (i in 1:5){
CI95_data_interictal_upper[i][[1]]  = avg_data_interictal[i][[1]] + std_data_interictal[i][[1]]/sqrt(length(perm))*t_dist
CI95_data_preictal_upper[i][[1]] = avg_data_preictal[i][[1]] + std_data_preictal[i][[1]]/sqrt(length(perm))*t_dist
CI95_data_ictal_upper[i][[1]] = avg_data_ictal[i][[1]] + std_data_ictal[i][[1]]/sqrt(length(perm))*t_dist
CI95_data_postictal_upper[i][[1]] =  avg_data_postictal[i][[1]] + std_data_postictal[i][[1]]/sqrt(length(perm))*t_dist
CI95_data_interictal_lower[i][[1]]  = avg_data_interictal[i][[1]] - std_data_interictal[i][[1]]/sqrt(length(perm))*t_dist
CI95_data_preictal_lower[i][[1]] = avg_data_preictal[i][[1]] - std_data_preictal[i][[1]]/sqrt(length(perm))*t_dist
CI95_data_ictal_lower[i][[1]] = avg_data_ictal[i][[1]] - std_data_ictal[i][[1]]/sqrt(length(perm))*t_dist
CI95_data_postictal_lower[i][[1]] =  avg_data_postictal[i][[1]] - std_data_postictal[i][[1]]/sqrt(length(perm))*t_dist
}
all_data_random_atlases[[a]] = vector(mode = "list", length = 4)
names(all_data_random_atlases[[a]] ) = c("interictal", "preictal", "ictal", "postictal")
for (i in 1:4){
all_data_random_atlases[[a]][[i]] = vector(mode = "list", length = 3)
names(all_data_random_atlases[[a]][[i]]) = c("mean", "CI95_upper", "CI95_lower")
}
all_data_random_atlases[[a]]$interictal$mean = avg_data_interictal
all_data_random_atlases[[a]]$interictal$CI95_upper = CI95_data_interictal_upper
all_data_random_atlases[[a]]$interictal$CI95_lower = CI95_data_interictal_lower
all_data_random_atlases[[a]]$preictal$mean = avg_data_preictal
all_data_random_atlases[[a]]$preictal$CI95_upper = CI95_data_preictal_upper
all_data_random_atlases[[a]]$preictal$CI95_lower = CI95_data_preictal_lower
all_data_random_atlases[[a]]$ictal$mean = avg_data_ictal
all_data_random_atlases[[a]]$ictal$CI95_upper = CI95_data_ictal_upper
all_data_random_atlases[[a]]$ictal$CI95_lower = CI95_data_ictal_lower
all_data_random_atlases[[a]]$postictal$mean = avg_data_postictal
all_data_random_atlases[[a]]$postictal$CI95_upper = CI95_data_postictal_upper
all_data_random_atlases[[a]]$postictal$CI95_lower = CI95_data_postictal_lower
}#end atlases a.
#SFC Standard Atlases
atlases=c('aal_res-1x1x1', 'AAL600', 'CPAC200_res-1x1x1', 'desikan_res-1x1x1','DK_res-1x1x1','JHU_res-1x1x1',
'Schaefer2018_100Parcels_17Networks_order_FSLMNI152_1mm', 'Schaefer2018_200Parcels_17Networks_order_FSLMNI152_1mm',
'Schaefer2018_300Parcels_17Networks_order_FSLMNI152_1mm' , 'Schaefer2018_400Parcels_17Networks_order_FSLMNI152_1mm',
'Schaefer2018_1000Parcels_17Networks_order_FSLMNI152_1mm', 'Talairach_res-1x1x1', 'JHU_aal_combined_res-1x1x1')
#initialize matrices to store all data for each atlas in a list
all_data_standard_atlases = vector(mode = "list", length = length(atlases))
names(all_data_standard_atlases) = atlases
for (a in 1:(length(atlases))){
atlas_data_directory = paste0(data_directory, '/',atlases[a] )
atlas_folder = atlases[a]
data_interictal_file_name = paste0('sub-', sub_ID, '_' , iEEG_filename, '_', interictal_time[1], '_', interictal_time[2], '_', atlas_folder,'_correlation.pickle')
data_preictal_file_name = paste0('sub-', sub_ID, '_' , iEEG_filename, '_', preictal_time[1], '_', preictal_time[2], '_', atlas_folder, '_correlation.pickle')
data_ictal_file_name = paste0('sub-', sub_ID, '_' , iEEG_filename, '_', ictal_time[1], '_', ictal_time[2], '_', atlas_folder , '_correlation.pickle')
data_postictal_file_name = paste0('sub-', sub_ID, '_' , iEEG_filename, '_', postictal_time[1], '_', postictal_time[2], '_', atlas_folder ,'_correlation.pickle')
data_interictal_filepath = paste0(atlas_data_directory, '/', data_interictal_file_name)
data_preictal_filepath = paste0(atlas_data_directory, '/', data_preictal_file_name)
data_ictal_file_path = paste0(atlas_data_directory, '/', data_ictal_file_name)
data_postictal_filepath = paste0(atlas_data_directory, '/', data_postictal_file_name)
data_interictal <- pd$read_pickle(data_interictal_filepath)
names(data_interictal) = data_interictal[6][[1]][,1]
data_preictal <- pd$read_pickle(data_preictal_filepath)
names(data_preictal) = data_preictal[6][[1]][,1]
data_ictal <- pd$read_pickle(data_ictal_file_path)
names(data_ictal) = data_ictal[6][[1]][,1]
data_postictal <- pd$read_pickle(data_postictal_filepath)
names(data_postictal) = data_postictal[6][[1]][,1]
data_interictal = data_interictal[1:5]
data_preictal = data_preictal[1:5]
data_ictal = data_ictal[1:5]
data_postictal = data_postictal[1:5]
all_data_standard_atlases[[a]] = vector(mode = "list", length = 4)
names(all_data_standard_atlases[[a]] ) = c("interictal", "preictal", "ictal", "postictal")
all_data_standard_atlases[[a]]$interictal = data_interictal
all_data_standard_atlases[[a]]$preictal = data_preictal
all_data_standard_atlases[[a]]$ictal = data_ictal
all_data_standard_atlases[[a]]$postictal= data_postictal
}#end atlases a.
file_name = paste0('sub-', sub_ID, '_', iEEG_filename,  '_ICTAL_', ictal_time[1], '_SFC_All_Atlases.RData')
save(all_data_random_atlases, all_data_standard_atlases, file = paste0(output_directory, '/',file_name ))
}
library(reticulate)#read python pickle files
pd <- import("pandas")
#Plot SFC
data_directory = "/Users/andyrevell/mount/USERS/arevell/papers/paper001/data_processed/figure5_data/structure_function_correlation"
data_directory = "/Users/asilva/mount/USERS/arevell/papers/paper001/paper001/figures/S1/structure_function_correlation"
output_directory= "/Users/andyrevell/mount/USERS/arevell/papers/paper001/paper001/figures/figure5/structure_function_correlation"
output_directory= "/Users/asilva/mount/USERS/arevell/papers/paper001/paper001/figures/S1/structure_function_correlation_plots"
setwd(output_directory)
options(scipen=999)#prevent scientifuc notation. iEEG org times are very long, so helps when reading files to read the number string verbatim
for (z in 1:20){
if (z == 1){sub_ID='RID0194'; iEEG_filename = 'HUP134_phaseII_D02'; ictal_start_time = 179302933433}
if (z == 2){sub_ID='RID0278'; iEEG_filename = 'HUP138_phaseII'; ictal_start_time = 248525740000}
if (z == 3){sub_ID='RID0278'; iEEG_filename = 'HUP138_phaseII'; ictal_start_time = 339008330000}
if (z == 4){sub_ID='RID0278'; iEEG_filename = 'HUP138_phaseII'; ictal_start_time = 416023190000}
if (z == 5){sub_ID='RID0278'; iEEG_filename = 'HUP138_phaseII'; ictal_start_time = 429498590000}
if (z == 6){sub_ID='RID0278'; iEEG_filename = 'HUP138_phaseII'; ictal_start_time = 458504560000}
if (z == 7){sub_ID='RID0309'; iEEG_filename = 'HUP151_phaseII'; ictal_start_time = 494776000000}
if (z == 8){sub_ID='RID0309'; iEEG_filename = 'HUP151_phaseII';  ictal_start_time = 530011424682}
if (z == 9){sub_ID='RID0320'; iEEG_filename = 'HUP140_phaseII_D02';  ictal_start_time = 331999132626}
if (z == 10){sub_ID='RID0320'; iEEG_filename = 'HUP140_phaseII_D02';  ictal_start_time = 340528040025}
if (z == 11){sub_ID='RID0320'; iEEG_filename = 'HUP140_phaseII_D02'; ictal_start_time = 344573548935}
if (z == 12){sub_ID='RID0440'; iEEG_filename = 'HUP172_phaseII';  ictal_start_time = 402704260829}
if (z == 13){sub_ID='RID0440'; iEEG_filename = 'HUP172_phaseII'; ictal_start_time = 408697930000}
if (z == 14){sub_ID='RID0440'; iEEG_filename = 'HUP172_phaseII';  ictal_start_time = 586990000000}
if (z == 15){sub_ID='RID0440'; iEEG_filename = 'HUP172_phaseII';  ictal_start_time = 664976000000}
if (z == 16){sub_ID='RID0440'; iEEG_filename = 'HUP172_phaseII';  ictal_start_time = 692879000000}
if (z == 17){sub_ID='RID0536'; iEEG_filename = 'HUP195_phaseII_D01';  ictal_start_time = 84729094008}
if (z == 18){sub_ID='RID0536'; iEEG_filename = 'HUP195_phaseII_D01'; ictal_start_time = 164694572385}
if (z == 19){sub_ID='RID0536'; iEEG_filename = 'HUP195_phaseII_D01'; ictal_start_time = 250710930770}
if (z == 20){sub_ID='RID0536'; iEEG_filename = 'HUP195_phaseII_D01';  ictal_start_time = 286819539584}
file_name = paste0('sub-', sub_ID, '_', iEEG_filename,  '_ICTAL_', ictal_start_time, '_SFC_All_Atlases.RData')
load( paste0(data_directory, '/',file_name ))
#create filler data with NAs. Filler between interictal and preictal (becasue they are not continuous)
filler =  rep(NA,  length(all_data_random_atlases$RA_N0010$ictal$mean$broadband) *0.80  )# X% of ictal length
#Make colors
colors_interictal = '#cc0000'
colors_preictal = '#00cc00'
colors_ictal = '#0000cc'
colors_postictal = '#cc00cc'
colors = c(rep(colors_interictal, length(all_data_random_atlases$RA_N0010$interictal$mean$broadband)),
rep('#000000', length(filler)),
rep(colors_preictal, length(all_data_random_atlases$RA_N0010$preictal$mean$broadband)),
rep(colors_ictal, length(all_data_random_atlases$RA_N0010$ictal$mean$broadband)),
rep(colors_postictal, length(all_data_random_atlases$RA_N0010$postictal$mean$broadband)))
random_atlases=c('RA_N0010', 'RA_N0030', 'RA_N0050', 'RA_N0075','RA_N0100','RA_N0200','RA_N0300', 'RA_N0400', 'RA_N0500' , 'RA_N0750', 'RA_N1000', 'RA_N2000')
standard_atlases=c('aal_res-1x1x1', 'AAL600', 'CPAC200_res-1x1x1', 'desikan_res-1x1x1','DK_res-1x1x1','JHU_res-1x1x1',
'Schaefer2018_100Parcels_17Networks_order_FSLMNI152_1mm', 'Schaefer2018_200Parcels_17Networks_order_FSLMNI152_1mm',
'Schaefer2018_300Parcels_17Networks_order_FSLMNI152_1mm' , 'Schaefer2018_400Parcels_17Networks_order_FSLMNI152_1mm',
'Schaefer2018_1000Parcels_17Networks_order_FSLMNI152_1mm', 'Talairach_res-1x1x1')
random_atlases_to_plot = c('RA_N0010', 'RA_N0030','RA_N0100','RA_N1000')
standard_atlases_to_plot = c('aal_res-1x1x1',  'CPAC200_res-1x1x1',
'Schaefer2018_100Parcels_17Networks_order_FSLMNI152_1mm','Schaefer2018_1000Parcels_17Networks_order_FSLMNI152_1mm',
'JHU_res-1x1x1')
standard_atlases_legend = c('AAL', 'CPAC', 'Schaefer 100', 'Schaefer 1000','JHU')
random_atlases_legend = c('10', '30','100', '1000')
#########
#to caluclate moving average:
ma <- function(x, n = 10){filter(x, rep(1 / n, n), sides = 2)}
standard_atlas_colors = c(
'#E61717E6',
'#e6ad00E6',
'#006400E6',
'#178DE6E6',
'#2F17E6E6'
)
#standard_atlas_colors = rainbow(length(standard_atlases_to_plot), s= 0.9,v=0.9,start = 0, end = 0.8, alpha = 0.9)
random_atlas_colors = rainbow(length(random_atlases_to_plot), s= 0.9,v=0.9,start = 0.65, end = 0.75, alpha = 0.9)
add_siezure_colors <- function(bottom){
#Adding seizure colors
#interictal
colors_interictal = '#ffffff'
colors_preictal = '#6666ff'
colors_ictal = '#ff6666'
colors_postictal = '#ffffff'
transparency = '22'
interictal_x = c(0:length(data_interictal_broadband_movingAvg ))
polygon(  x = c(interictal_x, rev(interictal_x)  ),
y = c( rep(par("usr")[4], length(interictal_x) ) , rep(bottom, length(interictal_x))   ),
border = NA, col = paste0(colors_interictal, transparency))
preictal_x_start = length(c(all_data_random_atlases$RA_N0010$interictal$mean$broadband,filler))+1
preictal_x_end = preictal_x_start+length(all_data_random_atlases$RA_N0010$preictal$mean$broadband)
ictal_x_start = preictal_x_end + 1
ictal_x_end = ictal_x_start+length(all_data_standard_atlases[[atlas_index]]$ictal$broadband)
postictal_x_start = ictal_x_end + 1
postictal_x_end = length(y_moving_avg)
polygon(  x = c(preictal_x_start:preictal_x_end, rev(preictal_x_start:preictal_x_end)  ),
y = c( rep(par("usr")[4], length(preictal_x_start:preictal_x_end) ) , rep(bottom, length(preictal_x_start:preictal_x_end))   ),
border = NA, col = paste0(colors_preictal, transparency))
polygon(  x = c(ictal_x_start:ictal_x_end, rev(ictal_x_start:ictal_x_end)  ),
y = c( rep(par("usr")[4], length(ictal_x_start:ictal_x_end) ) , rep(bottom, length(ictal_x_start:ictal_x_end))   ),
border = NA, col = paste0(colors_ictal, transparency))
polygon(  x = c(postictal_x_start:postictal_x_end, rev(postictal_x_start:postictal_x_end)  ),
y = c( rep(par("usr")[4], length(postictal_x_start:postictal_x_end) ) , rep(bottom, length(postictal_x_start:postictal_x_end))   ),
border = NA, col = paste0(colors_postictal, transparency))
}
fname = paste0(output_directory, '/sub-', sub_ID, '_', iEEG_filename,  '_ICTAL_', ictal_start_time,".pdf")
pdf(fname , width = 7, height = 6)
par(new = F)
#plotting parameters
ylim = c(-0.1, 0.6)
standard_atlases_line_width = 3
random_atlases_line_width = 3
standard_atlas_colors_transparency = 'ff'
CI95_color = "#99999922"
mar_1 = 0
mar_2 = 5
mar_3 = 3
mar_4 = 2
par(mfrow = c(2,1))
mar = c(mar_1,mar_2,mar_3,mar_4)
par(mar =mar)
las = 1
font_legend = 3
cex_legend = 0.75
cex_main = 1
line_main = -1.0
#Standard Atlases
for (a in 1:length(standard_atlases_to_plot)){
atlas_index = which(names(all_data_standard_atlases) == standard_atlases_to_plot[a])
#create running mean (moving average, convolution)
N = 20 #length of window
data_interictal_broadband_movingAvg = ma(all_data_standard_atlases[[atlas_index]]$interictal$broadband, N)
data_other_broadband_movingAvg = ma( c(all_data_standard_atlases[[atlas_index]]$preictal$broadband,
all_data_standard_atlases[[atlas_index]]$ictal$broadband,
all_data_standard_atlases[[atlas_index]]$postictal$broadband  ), N  )
#Calculating pad for the running mean
pad_data_interictal_broadband_movingAvg = length(which(is.na(data_interictal_broadband_movingAvg)))
pad_data_other_broadband_movingAvg = length(which(is.na(data_other_broadband_movingAvg)))
#removing NAs from the original moving average function
data_interictal_broadband_movingAvg = data_interictal_broadband_movingAvg[!is.na(data_interictal_broadband_movingAvg)]
data_other_broadband_movingAvg = data_other_broadband_movingAvg[!is.na(data_other_broadband_movingAvg)]
data_interictal_broadband_movingAvg = c(  rep(NA, pad_data_interictal_broadband_movingAvg),data_interictal_broadband_movingAvg )
data_other_broadband_movingAvg = c(  rep(NA, pad_data_other_broadband_movingAvg),data_other_broadband_movingAvg )
#plotting
y_moving_avg = c(data_interictal_broadband_movingAvg, filler, data_other_broadband_movingAvg)
data_length = length(y_moving_avg)
x = c(1:data_length)
xlim = c(0, data_length)
if (a == 1){par(new = F)}
if (a > 1){par(new = T)}
plot(x, y_moving_avg, xlim = xlim, ylim = ylim, bty="n", type = "l", lwd = standard_atlases_line_width,
col = standard_atlas_colors[a], ylab = "", xlab = "", xaxt = 'n', las = las)
par(xpd = F)
abline(h = c(par("usr")[3]))
interictal_x = c(0:length(data_interictal_broadband_movingAvg ))
#text(  x = (length(data_interictal_broadband_movingAvg )+(length(data_interictal_broadband_movingAvg ) +length(filler) + pad_data_other_broadband_movingAvg))/2  ,
#       y = (data_interictal_broadband_movingAvg[length(data_interictal_broadband_movingAvg)] +
#         data_other_broadband_movingAvg[pad_data_other_broadband_movingAvg+1])/2,
#     labels = standard_atlases_legend[a],adj = c(0.5,0.5), font = 2, cex = cex_legend)
text(  x = (length(data_interictal_broadband_movingAvg ) +length(filler) + pad_data_other_broadband_movingAvg)  ,
y = (data_other_broadband_movingAvg[pad_data_other_broadband_movingAvg+1]),
labels = standard_atlases_legend[a],adj = c(1,0.5), font = font_legend, cex = cex_legend, offset = 0.4, pos = 2)
#legend('bottom', legend = standard_atlases_legend, fill = standard_atlas_colors, bty = 'n', bg ='n',horiz = T,
#       text.width=c(50,50,70,40,70), xpd = TRUE, x.intersp=0.3,
#       xjust=0, yjust=0)
#Adding 95% confidence intervals
#interictal
}
add_siezure_colors(par("usr")[3])
title(main = "Standard", line = line_main, cex.main = cex_main, font.main = 1)
par(xpd = T)
mtext(text="Structure-Function Correlation",side=3,line=-1.7,outer=TRUE,cex=2, font = 4)
mtext(text=paste0("Standard vs Random Atlases"),side=3,line=-3,outer=TRUE, cex=1, font = 3)
mtext(text=paste0("sub-", sub_ID, '_', iEEG_filename,  '_ICTAL_', ictal_start_time),
side=1,line=-1,outer=TRUE, cex=0.6, font = 1, at = c(0),adj = 0)
par(xpd = F)
#plotting parameters
mar_1 = 3
mar_3 = 0
mar = c(mar_1,mar_2,mar_3,mar_4)
par(mar =mar)
#Random Atlases
for (a in 1:length(random_atlases_to_plot)){
atlas_index = which(names(all_data_random_atlases) == random_atlases_to_plot[a])
#create running mean (moving average, convolution)
N = 20 #length of window
data_interictal_broadband_movingAvg = ma(all_data_random_atlases[[atlas_index]]$interictal$mean$broadband, N)
data_interictal_broadband_movingAvg_CI95_upper = ma(all_data_random_atlases[[atlas_index]]$interictal$CI95_upper$broadband, N)
data_interictal_broadband_movingAvg_CI95_lower = ma(all_data_random_atlases[[atlas_index]]$interictal$CI95_lower$broadband, N)
data_other_broadband_movingAvg = ma( c(all_data_random_atlases[[atlas_index]]$preictal$mean$broadband,
all_data_random_atlases[[atlas_index]]$ictal$mean$broadband,
all_data_random_atlases[[atlas_index]]$postictal$mean$broadband  ), N  )
data_other_broadband_movingAvg_CI95_upper = ma( c(all_data_random_atlases[[atlas_index]]$preictal$CI95_upper$broadband,
all_data_random_atlases[[atlas_index]]$ictal$CI95_upper$broadband,
all_data_random_atlases[[atlas_index]]$postictal$CI95_upper$broadband  ), N  )
data_other_broadband_movingAvg_CI95_lower = ma( c(all_data_random_atlases[[atlas_index]]$preictal$CI95_lower$broadband,
all_data_random_atlases[[atlas_index]]$ictal$CI95_lower$broadband,
all_data_random_atlases[[atlas_index]]$postictal$CI95_lower$broadband  ), N  )
#Calculating pad for the running mean
pad_data_interictal_broadband_movingAvg = length(which(is.na(data_interictal_broadband_movingAvg)))
pad_data_other_broadband_movingAvg = length(which(is.na(data_other_broadband_movingAvg)))
#removing NAs from the original moving average function
data_interictal_broadband_movingAvg = data_interictal_broadband_movingAvg[!is.na(data_interictal_broadband_movingAvg)]
data_interictal_broadband_movingAvg_CI95_upper = data_interictal_broadband_movingAvg_CI95_upper[!is.na(data_interictal_broadband_movingAvg_CI95_upper)]
data_interictal_broadband_movingAvg_CI95_lower = data_interictal_broadband_movingAvg_CI95_lower[!is.na(data_interictal_broadband_movingAvg_CI95_lower)]
data_other_broadband_movingAvg = data_other_broadband_movingAvg[!is.na(data_other_broadband_movingAvg)]
data_other_broadband_movingAvg_CI95_upper = data_other_broadband_movingAvg_CI95_upper[!is.na(data_other_broadband_movingAvg_CI95_upper)]
data_other_broadband_movingAvg_CI95_lower = data_other_broadband_movingAvg_CI95_lower[!is.na(data_other_broadband_movingAvg_CI95_lower)]
data_interictal_broadband_movingAvg = c(  rep(NA, pad_data_interictal_broadband_movingAvg),data_interictal_broadband_movingAvg )
data_interictal_broadband_movingAvg_CI95_upper = c(  rep(NA, pad_data_interictal_broadband_movingAvg),data_interictal_broadband_movingAvg_CI95_upper )
data_interictal_broadband_movingAvg_CI95_lower = c(  rep(NA, pad_data_interictal_broadband_movingAvg),data_interictal_broadband_movingAvg_CI95_lower )
data_other_broadband_movingAvg = c(  rep(NA, pad_data_other_broadband_movingAvg),data_other_broadband_movingAvg )
data_other_broadband_movingAvg_CI95_upper = c(  rep(NA, pad_data_other_broadband_movingAvg),data_other_broadband_movingAvg_CI95_upper )
data_other_broadband_movingAvg_CI95_lower = c(  rep(NA, pad_data_other_broadband_movingAvg),data_other_broadband_movingAvg_CI95_lower )
#plotting
y_moving_avg = c(data_interictal_broadband_movingAvg, filler, data_other_broadband_movingAvg)
y_moving_avg_CI95_upper = c(data_interictal_broadband_movingAvg_CI95_upper, filler, data_other_broadband_movingAvg_CI95_upper)
y_moving_avg_CI95_lower = c(data_interictal_broadband_movingAvg_CI95_lower, filler, data_other_broadband_movingAvg_CI95_lower)
data_length = length(y_moving_avg)
x = c(1:data_length)
if (a == 1){par(new = F)}
if (a > 1){par(new = T)}
plot(x, y_moving_avg, xlim = xlim, ylim = ylim, bty="n", type = "l", lwd = random_atlases_line_width, col = random_atlas_colors[a],
las = las, xlab = "", ylab = "", xaxt = 'n')
text(  x = (length(data_interictal_broadband_movingAvg ) +length(filler) + pad_data_other_broadband_movingAvg)  ,
y = (data_other_broadband_movingAvg[pad_data_other_broadband_movingAvg+1]),
labels = random_atlases_legend[a],adj = c(1,0.5), font = font_legend, cex = cex_legend, offset = 0.4, pos = 2)
#Adding 95% confidence intervals
#interictal
polygon(c(1:length(data_interictal_broadband_movingAvg_CI95_lower), rev(1:length(data_interictal_broadband_movingAvg_CI95_lower))),
c(data_interictal_broadband_movingAvg_CI95_lower, rev(data_interictal_broadband_movingAvg_CI95_upper)) ,
border = CI95_color, col = CI95_color)
#other
polygon(  x = c((length(c(data_interictal_broadband_movingAvg,filler))+1):data_length, rev((length(c(data_interictal_broadband_movingAvg,filler))+1):data_length)),
y = c(data_other_broadband_movingAvg_CI95_lower, rev(data_other_broadband_movingAvg_CI95_upper)),
border = CI95_color, col = CI95_color)
}
add_siezure_colors(ylim[1])
title(main = "Random", line = line_main, cex.main = cex_main, font.main = 1)
interictal_start = 0
interictal_end = length(data_interictal_broadband_movingAvg )
preictal_x_start = length(c(data_interictal_broadband_movingAvg,filler))+1
preictal_x_end = preictal_x_start+length(all_data_standard_atlases[[atlas_index]]$preictal$broadband)
ictal_x_start = preictal_x_end + 1
ictal_x_end = ictal_x_start+length(all_data_standard_atlases[[atlas_index]]$ictal$broadband)
postictal_x_start = ictal_x_end + 1
postictal_x_end = length(y_moving_avg)
axis(1, at=c(preictal_x_start, ictal_x_start, ictal_x_end,postictal_x_end),
labels=c(preictal_x_start-ictal_x_start,0, ictal_x_end -ictal_x_start+1, ictal_x_end -ictal_x_start+1 +180 ),
pos=-0.1, lty=1, las=1, tck=-0.03, lwd = 2, font = 2)
axis(1, at=pad_data_interictal_broadband_movingAvg,
labels=c("~6 hrs before" ),
pos=-0.1, lty=1, las=1, tck=-0.03, lwd = 2, font = 2, adj = 1)
abline(h = -0.1, lwd = 2)
mtext(text="Spearman Rank Correlation",side=2,line=-2,outer=TRUE,cex=1.7)
mtext(text="Time (s)",side=1,line=-1,outer=TRUE,cex=1.7)
dev.off()
}
